#!/usr/bin/python
 
from L3GD20 import L3GD20
from LMS303DS import LMS303DS
import time
import math
 
# Communication object
s = L3GD20(busId = 0, slaveAddr = 0x6b, ifLog = False, ifWriteBlock=False)
ss = LMS303DS(busId = 0, slaveAddr = 0x1e, ifLog = False, ifWriteBlock=False)

 
# Configuration
s.Set_PowerMode("Normal")
s.Set_FullScale_Value("250dps")
s.Set_AxisX_Enabled(True)
s.Set_AxisY_Enabled(True)
s.Set_AxisZ_Enabled(True)
s.Init() # Do measurements after Init!
s.Calibrate()
print "hello gyro"

def dist(a,b):
    return math.sqrt((a*a)+(b*b))
 
def get_y_rotation(x,y,z):
    radians = math.atan2(x, dist(y,z))
    return -math.degrees(radians)
 
def get_x_rotation(x,y,z):
    radians = math.atan2(y, dist(x,z))
    return math.degrees(radians)

def getfilter_rotation(s, ss):
    now = time.time()

    K = 0.98
    K1 = 1 - K
#    print "hello"
    time_diff = 0.01

    (gyro_scaled_x, gyro_scaled_y, gyro_scaled_z) = s.Get_CalOut_Value()
#    print "hello gyro"
    (accel_scaled_x, accel_scaled_y, accel_scaled_z) = ss.getAccel()
#    print "hello acce"
    last_x = get_x_rotation(accel_scaled_x, accel_scaled_y, accel_scaled_z)
    last_y = get_y_rotation(accel_scaled_x, accel_scaled_y, accel_scaled_z)

    gyro_offset_x = gyro_scaled_x 
    gyro_offset_y = gyro_scaled_y

    gyro_total_x = (last_x) - gyro_offset_x
    gyro_total_y = (last_y) - gyro_offset_y

#    print "{0:.4f} {1:.2f} {2:.2f} {3:.2f} {4:.2f} {5:.2f} {6:.2f}".format( time.time() - now, (last_x), gyro_total_x, (last_x), (last_y), gyro_total_y, (last_y))

    for i in range(0, int(3.0 / time_diff)):
        time.sleep(time_diff - 0.005) 
 #       print "hello"
        (gyro_scaled_x, gyro_scaled_y, gyro_scaled_z) = s.Get_CalOut_Value()
        (accel_scaled_x, accel_scaled_y, accel_scaled_z) = ss.Get_CalOut_Value()
    
        gyro_scaled_x -= gyro_offset_x
        gyro_scaled_y -= gyro_offset_y
    
        gyro_x_delta = (gyro_scaled_x * time_diff)
        gyro_y_delta = (gyro_scaled_y * time_diff)

        gyro_total_x += gyro_x_delta
        gyro_total_y += gyro_y_delta

        rotation_x = get_x_rotation(accel_scaled_x, accel_scaled_y, accel_scaled_z)
        rotation_y = get_y_rotation(accel_scaled_x, accel_scaled_y, accel_scaled_z)

        last_x = K * (last_x + gyro_x_delta) + (K1 * rotation_x)
        last_y = K * (last_y + gyro_y_delta) + (K1 * rotation_y)
    
 #       print "{0:.4f} {1:.2f} {2:.2f} {3:.2f} {4:.2f} {5:.2f} {6:.2f}".format( time.time() - now, (rotation_x), (gyro_total_x), (last_x), (rotation_y), (gyro_total_y), (last_y))

    return (rotation_x, rotation_y)

while 1==1:
    (rx,ry)=getfilter_rotation(s,ss)
    print (rx, ry)
